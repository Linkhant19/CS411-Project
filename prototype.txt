Our group chose a technology stack that uses Python and Flask on the back end, React on the front end, and MongoDB for our database. The other stack under consideration was Node.js and Express.js for back end, Angular for front end, and MySQL for database. The reason we didn't choose the latter is because the first stack offers more flexibility and the simplest functional execution that fit our app requirements and aligned with our group's skillset. 

Since our application makes 3 API calls to Spotify, weather and Google Maps, we decided to structure the back end as simply as possible. While Python allows us to provide basic app functionality when interacting with these API, Flask handles user requests in a simple, lightweight environment. The user is only giving one input to the app by asking for directions, so we didn't need anything more complicated to process the request. The main reason we didn't choose Node.js and Express.js, which offer similar flexibility, is that we weren't too familiar with them and wanted to focus on programming the API calls to be functional.

Similarly, React on the front end provided us with an efficient JS library for easier use and maintenance. Angular, on the other hand, would have been useful for building a more complex app since it offers more powerful features and more configuration. Again, we prioritised simplicity and optimised performance in our app, so we opted for React.

Our app stores user Spotify credentials and their search history, which they can access on the web application. For this reason, our choice of database was MongoDB because it offers a JSON format for easy data storage and retrieval. MySQL is more rigid in its data storage since it is designed for structured data and does not offer the same level of adaptation to unstructured data that MongoDB does. Although most of our data is structured, should we want to incorporate more of the user's preferences in choosing songs for the playlist, for example, we will need a database that will be able to handle these unstructured aspects.

